{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "unused-imports",
    "promise",
    "sort-exports",
    "simple-import-sort",
    "prettier",
    "import",
    "node",
    "security",
    "react",
    "jsx-a11y",
    "sonarjs"
  ],
  "settings": {
    "import/resolver": {
      "typescript": {},
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "overrides": [
    {
      "files": ["*.js", "*.jsx", "*.ts", "*.tsx"]
    }
  ],
  "extends": [
    "plugin:@typescript-eslint/strict",
    "plugin:jsx-a11y/recommended",
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "plugin:react/jsx-runtime",
    "plugin:react-hooks/recommended"
  ],
  "rules": {
    // Import and Export rules
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "warn",
        "tsx": "warn"
      }
    ],
    "import/no-cycle": "error",
    "import/no-unresolved": "warn",
    "import/first": "error",
    "import/no-duplicates": "error",
    "sort-exports/sort-exports": [
      "error",
      {
        "sortDir": "asc",
        "ignoreCase": true,
        "sortExportKindFirst": "type",
        "pattern": "**/index.ts"
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "always",
        "alphabetize": { "order": "asc" }
      }
    ],
    "import/no-deprecated": "warn",
    "import/no-mutable-exports": "error",

    // TypeScript rules
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/prefer-readonly": "warn",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "varsIgnorePattern": "^_",
        "argsIgnorePattern": "^_",
        "ignoreRestSiblings": true
      }
    ],
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/strict-boolean-expressions": "error",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "warn",

    // React rules
    "react/jsx-no-useless-fragment": "warn",
    "react/jsx-key": "error",
    "react/no-array-index-key": "warn",
    "react-hooks/exhaustive-deps": "error",

    // Promise rules
    "promise/always-return": "warn",
    "promise/no-return-wrap": "error",
    "promise/param-names": "error",
    "promise/no-native": "off",
    "promise/no-nesting": "warn",
    "promise/no-promise-in-callback": "warn",
    "promise/no-callback-in-promise": "warn",
    "promise/avoid-new": "off",
    "promise/no-new-statics": "error",
    "promise/no-return-in-finally": "warn",
    "promise/valid-params": "warn",

    // Code quality rules
    "sonarjs/no-duplicate-string": "warn",
    "sonarjs/cognitive-complexity": ["warn", 15],
    "no-nested-ternary": "error",
    "max-depth": ["warn", 3],
    "complexity": ["warn", 10],
    "no-console": 1,
    "no-constant-binary-expression": "warn",

    // Unused imports
    "unused-imports/no-unused-imports": "error",

    // Security rules
    "security/detect-non-literal-regexp": "warn",
    "security/detect-unsafe-regex": "warn",

    // Formatting
    "prettier/prettier": 2,

    // Prevent accidental promises in conditional statements
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": true,
        "checksConditionals": true
      }
    ],

    // Prevent `any` from spreading
    "@typescript-eslint/no-unsafe-argument": "error",

    // Enforce consistent type assertions
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "never"
      }
    ],

    // Force early returns instead of else
    "no-else-return": ["error", { "allowElseIf": false }],

    // Prevent easy-to-miss mistakes
    "no-implicit-coercion": "error",
    "no-unneeded-ternary": "error",

    // Prevent common React mistakes
    "react/jsx-no-constructed-context-values": "error",
    "react/jsx-no-leaked-render": "error",
    "react/hook-use-state": "error"
  }
}
